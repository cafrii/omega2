
자주 사용되는 코드 조각들.

c++ 코드

#include <iostream>

// stdint.h
INT32_MAX, INT64_MAX, INTMAX_MAX //== INT64_MAX

ios_base::sync_with_stdio(false);
cin.tie(nullptr);

int n, m;
cin >> n >> m;
cout << answer << endl;

// 최소 큐로 동작 시키는 경우..
priority_queue<T, vector<T>, greater<T>> pq;


----------------
kruscal find_root non-recursive!

def find_root(a:int)->int:
    stack = []
    while roots[a] != a:
        stack.append(a)
        a = roots[a]
    for b in stack:
        roots[b] = a
    return a


----------------


import sys

#def log(fmt, *args): print(fmt % args, file=sys.stderr)
log = (lambda fmt, *args: print(fmt % args, file=sys.stderr)) \
    if __import__('os').getenv('DBG') else (lambda *args, **kwargs: None)



def get_input():
    input = sys.stdin.readline
    N,M = map(int, input().split())
    return ...

def solve():
    '''
    '''
    return

if __name__ == '__main__':
    #inp = get_input()
    #print(solve(*inp))
    #r = solve(*inp)
    #r = solve(*get_input())
    #print(r)
    print(solve(*get_input()))


----------

# sys.getsizeof deep version
def getsizeof2(obj, seen=None):
    import sys
    if seen is None:
        seen = set()
    obj_id = id(obj)
    if obj_id in seen:
        return 0
    seen.add(obj_id)
    size = sys.getsizeof(obj)
    if isinstance(obj, dict):
        size += sum((getsizeof2(k, seen) + getsizeof2(v, seen)) for k, v in obj.items())
    elif hasattr(obj, '__dict__'):
        size += getsizeof2(obj.__dict__, seen)
    elif isinstance(obj, (list, tuple, set, frozenset)):
        size += sum(getsizeof2(i, seen) for i in obj)
    return size



def stdout_to_str(fn):
    import sys, io
    stdout0 = sys.stdout
    sys.stdout = io.StringIO()
    fn()
    res = sys.stdout
    sys.stdout = stdout0 # restore
    return restore

