'''
11049번
행렬 곱셈 순서

시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
1 초	256 MB	43698	19659	14226	43.824%

문제
크기가 NxM인 행렬 A와 MxK인 B를 곱할 때 필요한 곱셈 연산의 수는 총 NxMxK번이다.
행렬 N개를 곱하는데 필요한 곱셈 연산의 수는 행렬을 곱하는 순서에 따라 달라지게 된다.

예를 들어, A의 크기가 5x3이고, B의 크기가 3x2, C의 크기가 2x6인 경우에 행렬의 곱 ABC를 구하는 경우를 생각해보자.

AB를 먼저 곱하고 C를 곱하는 경우 (AB)C에 필요한 곱셈 연산의 수는 5x3x2 + 5x2x6 = 30 + 60 = 90번이다.
BC를 먼저 곱하고 A를 곱하는 경우 A(BC)에 필요한 곱셈 연산의 수는 3x2x6 + 5x3x6 = 36 + 90 = 126번이다.
같은 곱셈이지만, 곱셈을 하는 순서에 따라서 곱셈 연산의 수가 달라진다.

행렬 N개의 크기가 주어졌을 때, 모든 행렬을 곱하는데 필요한 곱셈 연산 횟수의 최솟값을 구하는 프로그램을 작성하시오.
입력으로 주어진 행렬의 순서를 바꾸면 안 된다.

입력
첫째 줄에 행렬의 개수 N(1 ≤ N ≤ 500)이 주어진다.

둘째 줄부터 N개 줄에는 행렬의 크기 r과 c가 주어진다. (1 ≤ r, c ≤ 500)

항상 순서대로 곱셈을 할 수 있는 크기만 입력으로 주어진다.

출력
첫째 줄에 입력으로 주어진 행렬을 곱하는데 필요한 곱셈 연산의 최솟값을 출력한다.
정답은 2^31 - 1 보다 작거나 같은 자연수이다.
또한, 최악의 순서로 연산해도 연산 횟수가 2^31 - 1 보다 작거나 같다.



예제 입력 1
3
5 3
3 2
2 6

예제 출력 1
90

---------------

일단 부분 행렬 곱셈 결과 (최소 연산 횟수)를 저장하는 dp array를 만들어가자.

Python3 으로 제출하면 시간초과 실패 뜰 가능성이 매우 높다!!
PyPy3 로 제출하자!

'''



import sys
input = sys.stdin.readline

def log(fmt, *args): print(fmt % args, file=sys.stderr)


def solve_dp(A:list[tuple[int,int]])->int:
    '''

    '''
    N = len(A)
    # A 목록에는 총 N 개의 행렬이 존재. A[0]..A[N-1]

    INF = 2**31

    dp = [ [INF]*N for k in range(N) ]
    # dp[i][k] 는 행렬 A[i] 부터 A[k] 까지의 부분 행렬 리스트 만의 행렬 곱 최소 계산량

    # diff == 0
    for i in range(N):
        dp[i][i] = 0

    # distance 가 1, 부분 행렬의 길이가 2.
    # (ri1 x ci1) 행렬과 (ri2 x ci2) 행렬의 곱.
    #   ci1 == ri2 이어야 하며
    # 계산량은 ri1 x ci1 x ci2 로 고정된 수식.
    for i in range(N-1):
        dp[i][i+1] = A[i][0] * A[i][1] * A[i+1][1]

    for d in range(2, N):  # 1 ~ N-1
        # d (diff) 는 부분 행렬의 길이 - 1

        for k in range(d, N): # d ~ N-1
            i = k - d
            '''
            x  0  1  2  3  4  5  .. -> k
            0  0  01 02 03 04 05 ..
            1  _  0  12 13 14 15
            2  _  _  0  23 24 25
            3  _  _  _  0  34 35  |
            4  _  _  _  _  0  45  v i
            5  _  _  _  _  _  0
            ..
            dp[i][k]:
                A[i] 부터 A[k] 의 부분 행렬들의 행렬 곱을 생각할 때
                    A[i] * A[i+1] * .. * A[k]
                이 부분 행렬 곱 계산시 계산량의 최소값.

            a_i 부터 시작해서 a_k 로 끝나는 부분 행렬 곱
                a_i   a_{i+1}   a_{i+2}   ..  a_{k-1}   a_k
                    ^         ^         ^             ^
            j       i         i+1       i+2           k-1

            최종 행렬 곱 연산이 수행되는 위치를 j 라고 하고
            다음과 같이 가능한 모든 j 경우 중 최소 값을 선택하여 dp 에 저장.
            j=i
                i / i+1   -> (dp[i][i]) + dp[i+1][k] + r_i*c_i*c_k
            j=i+1
                i+1 / i+2 -> dp[i][i+1] + dp[i+2][k] + r_i*c_{i+1}*c_k
                ...
            j=k-1
                k-1 / k   -> dp[i][k-1] + (dp[k-1][k-1]) + r_i*c_{k-1}*c_k
            '''

            # cand = []
            # for j in range(i, k):
            #     cand.append( dp[i][j] + dp[j+1][k] + A[i][0]*A[j][1]*A[k][1] )
            # dp[i][k] = min(cand)

            minval = INF
            for j in range(i, k):
                val = dp[i][j] + dp[j+1][k] + A[i][0]*A[j][1]*A[k][1]
                if val < minval: minval = val
            dp[i][k] = minval
        pass

    # if True:
    #     w = len(str( max( [ dp[k][j] for k in range(N) for j in range(N) if j>=k ] )))
    #     for i in range(N):
    #         s = ' '.join([ (f'{dp[i][k]:{w}}' if k>=i else '_'*w) for k in range(N) ])
    #         log(s)

    return dp[0][N-1]



N = int(input().strip())
A = []
for _ in range(N):
    r,c = map(int, input().split())
    if A:
        assert A[-1][1] == r, "row/col mismatch"
    A.append((r, c))

print(solve_dp(A))



'''

예제 입력 1
3
5 3
3 2
2 6
예제 출력 1
90

run=(python3 11049.py)


echo '3\n5 3\n3 2\n2 6' | $run


echo '6\n30 35\n35 15\n15 5\n5 10\n10 20\n20 25' | $run
-> 15125

echo '8\n1 100\n100 1\n1 100\n100 1\n1 100\n100 1\n1 100\n100 1' | $run
-> 403

echo '1\n1 1' | $run
-> 0

echo '5\n1 10\n10 1\n1 10\n10 1\n1 10' | $run
-> 31

echo '7\n2 5\n5 3\n3 2\n2 3\n3 4\n4 7\n7 1' | $run
-> 77

echo '4\n5 4\n4 3\n3 2\n2 1' | $run
-> 38

echo '500\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6\n6 2\n2 9\n9 5\n5 2\n2 2\n2 3\n3 8\n8 3\n3 1\n1 6' | time $run
-> 7334


'''


