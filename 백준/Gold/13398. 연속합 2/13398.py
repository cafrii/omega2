'''
13398번

연속합 2 성공

시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
2 초	512 MB	29473	9203	6845	30.512%

문제
n개의 정수로 이루어진 임의의 수열이 주어진다. 우리는 이 중 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장 큰 합을 구하려고 한다.
단, 수는 한 개 이상 선택해야 한다. 또, 수열에서 수를 하나 제거할 수 있다. (제거하지 않아도 된다)

예를 들어서 10, -4, 3, 1, 5, 6, -35, 12, 21, -1 이라는 수열이 주어졌다고 하자.
여기서 수를 제거하지 않았을 때의 정답은 12+21인 33이 정답이 된다.

만약, -35를 제거한다면, 수열은 10, -4, 3, 1, 5, 6, 12, 21, -1이 되고, 여기서 정답은 10-4+3+1+5+6+12+21인 54가 된다.

입력
첫째 줄에 정수 n(1 ≤ n ≤ 100,000)이 주어지고 둘째 줄에는 n개의 정수로 이루어진 수열이 주어진다.
수는 -1,000보다 크거나 같고, 1,000보다 작거나 같은 정수이다.

출력
첫째 줄에 답을 출력한다.


---------------

3:05~40

13398 은 1912 의 변형이다.

A 배열의 수에서 앞 k개 까지의 수열, 즉 A[:k] 에 대해서만 고려.
이 수열 중 연속된 부분 수열을 고려함.
유지할 중간 결과물 중에 '하나의 숫자를 제거하는 옵션을 포함하는 경우'를 추가해야 함.

우측 끝에 인접한 부분 수열 A[x:k] 의 최대 합 -> s[0]
A[y:k-1] 의 최대 합 -> s[1]
A[z:k] 에서 숫자 하나 제거 옵션을 고려한 최대 합 -> s[2]
지금까지의 최대값 추적 -> s[3]

'''

import sys
input = sys.stdin.readline

MIN_VAL = -1000
MAX_N = 100_000
MIN = MIN_VAL*MAX_N-1

N = int(input().strip())
A = list(map(int, input().split()))
assert len(A) == N

def solve()->int:
    s = [ MIN, MIN, MIN, MIN ]

    for k in range(N):
        # s[0]: A[x:k+1] 의 최대 합
        # s[1]: A[y:k] 의 최대 합
        # s[2]: A[z:k+1] 중 하나를 제거하는 경우를 포함한 최대 합
        # s[3]: 최대 값 추척
        ns = [MIN]*4  # next of s
        ns[0] = max(s[0]+A[k], A[k])
        ns[1] = s[0]
        ns[2] = max(ns[0], ns[1], s[2]+A[k])
        ns[3] = max(s[3], ns[2])
        s = ns

    return s[3]

print(solve())



'''
예제 입력 1
10
10 -4 3 1 5 6 -35 12 21 -1
예제 출력 1
54

run=(python3 13398.py)

echo '10\n10 -4 3 1 5 6 -35 12 21 -1' | $run
# -> 54
echo '4\n-1 -1 1 -1' | $run
# -> 1
echo '1\n-1' | $run
# -> -1
echo '5\n-5 -4 3 5 6' | $run
# -> 14
echo '6\n-1 700 -500 -150 1000 -100' | $run
# -> 1550

'''

