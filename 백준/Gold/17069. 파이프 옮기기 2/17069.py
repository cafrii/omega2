'''
17069번

파이프 옮기기 2

시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
0.5 초 (추가 시간 없음)

...

입력
첫째 줄에 집의 크기 N(3 ≤ N ≤ 16)이 주어진다. 둘째 줄부터 N개의 줄에는 집의 상태가 주어진다. 빈 칸은 0, 벽은 1로 주어진다. (1, 1)과 (1, 2)는 항상 빈 칸이다.

출력
첫째 줄에 파이프의 한쪽 끝을 (N, N)으로 이동시키는 방법의 수를 출력한다. 이동시킬 수 없는 경우에는 0을 출력한다. 방법의 수는 항상 1,000,000보다 작거나 같다.

17070.py 와 내용이 동일하다.
다만 N 의 범위가 더 늘어나서, 시간 초과 함정을 노린 듯 함.

난 처음부터 dp로 풀어서 여기에도 동일한 답을 제출할 수 있음.
오히려 17070 을 dp 아닌 다른 방법으로 시도해 보는 것도 좋을 듯.



'''


import sys
input = sys.stdin.readline

def log(fmt, *args): print(fmt % args, file=sys.stderr)


def solve(A:list[str]):
    N = len(A) - 1
    assert len(A[0]) - 1 == N

    log('%s', '\n'.join(A))

    dp = [ [ [0,0,0] for c in range(N+1) ] for r in range(N+1) ]
    # dp[r][c][type]
    # type  0:가로, 1:세로, 2:대각선

    dp[1][2][0] = 1 # 초기 상태

    for r in range(1, N+1):
        cs,ce = (1,N) if r>1 else (3,N)
        for c in range(cs, ce+1):
            if A[r][c] == '0':
                dp[r][c][0] = dp[r][c-1][0] + dp[r][c-1][2] # 가로
                dp[r][c][1] = dp[r-1][c][1] + dp[r-1][c][2] # 세로
            if A[r][c] == '0' and A[r][c-1] == '0' and A[r-1][c] == '0':
                dp[r][c][2] = dp[r-1][c-1][0] + dp[r-1][c-1][1] + dp[r-1][c-1][2]
            # log('dp[%d][%d] : %s', r, c, dp[r][c])
    return sum(dp[N][N])



N = int(input().strip())
A = [ '.' * (N+1) ]
for _ in range(N):
    A.append( '.' + input().strip().replace(' ', '') )

print(solve(A))




'''
예제 입력 1
3
0 0 0
0 0 0
0 0 0
-> 1

echo '3\n0 0 0\n0 0 0\n0 0 0' | python 17070.py

예제 입력 2
4
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
-> 3

예제 입력 3
5
0 0 1 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
-> 0

예제 입력 4
6
0 0 0 0 0 0
0 1 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
-> 13


예제 입력 5
22
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
->
4345413252


3
0 0 0
0 0 1
0 0 0

'''