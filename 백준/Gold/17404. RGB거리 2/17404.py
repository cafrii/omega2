'''
17404번
RGB거리 2 성공

시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
0.5 초 (추가 시간 없음)	128 MB	21122	12639	10458	60.076%

문제
RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.

집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다.
각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.

1번 집의 색은 2번, N번 집의 색과 같지 않아야 한다.
N번 집의 색은 N-1번, 1번 집의 색과 같지 않아야 한다.
i(2 ≤ i ≤ N-1)번 집의 색은 i-1, i+1번 집의 색과 같지 않아야 한다.

입력
첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다.
둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다.
집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.

출력
첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.


-----

4:02~4:35

유사 문제: 1149 RGB거리

'''




import sys

def log(fmt, *args): print(fmt % args, file=sys.stderr)

def get_input():
    N = int(input().strip())
    C = [] # C[k]: cost of painting house-k, zero-based.
    for _ in range(N):
        r,g,b = map(int, input().split())
        C.append((r, g, b))
    return C


MAX_COST = int(1e7) # > 1000*1000

def solve_dp(C:list[tuple[int,int,int]])->int:
    '''
    첫번째 집의 조건이 마지막 집과 연계되어 있으므로, 초기 최적값을 확정할 수 없다.
    따라서 세가지 모두 시도한 후 선택해야 한다.
    '''
    N = len(C)
    min_costs = []

    # try three possible cases.
    for h in range(3):
        # h: 첫번째 집의 색상을 각 세 가지 경우를 가정하여 반복 계산.

        dp = [ [0,0,0] for k in range(N) ]
        # dp[k]: 0부터 k번째 집까지 이미 칠했고, 이제 k+1번째 집을 칠 할 차례임.
        #        dp[k][*]는 마지막 k번째 집이 각각 r, g, b 로 칠해진 경우, 각각의 최소 비용

        # first house. 현재 계산 중인 색상 이외에는 선택이 불가하도록 최대 비용 설정.
        dp[0][:] = [ (C[0][j] if j==h else  MAX_COST) for j in range(3) ]

        for k in range(1,N):
            # dp[k] 번째 집을 r 로 칠하려면 dp[k-1] 집이 g 또는 b 이어야 함. 이 두가지 중 최소 비용 선택.
            dp[k][0] = min(dp[k-1][1], dp[k-1][2]) + C[k][0]
            dp[k][1] = min(dp[k-1][0], dp[k-1][2]) + C[k][1]
            dp[k][2] = min(dp[k-1][0], dp[k-1][1]) + C[k][2]

        # 마지막 집. 첫번째 집과 같은 색상은 선택 불가함.
        dp[N-1][h] = MAX_COST
        # log("first %d: last dp %s", h, dp[N-1])
        min_costs.append(min(dp[N-1]))

    # log("final: %s", min_costs)
    return min(min_costs)


if __name__ == '__main__':
    inp = get_input()
    print(solve_dp(inp))

'''
예제 입력 1
3
26 40 83
49 60 57
13 89 99
예제 출력 1
110
예제 입력 2
3
1 100 100
100 1 100
100 100 1
예제 출력 2
3
예제 입력 3
3
1 100 100
100 100 100
1 100 100
예제 출력 3
201
예제 입력 4
6
30 19 5
64 77 64
15 19 97
4 71 57
90 86 84
93 32 91
예제 출력 4
208
예제 입력 5
8
71 39 44
32 83 55
51 37 63
89 29 100
83 58 11
65 13 15
47 25 29
60 66 19
예제 출력 5
253



run=(python3 17404.py)


echo '3\n26 40 83\n49 60 57\n13 89 99' | $run
echo '3\n1 100 100\n100 1 100\n100 100 1' | $run
echo '3\n1 100 100\n100 100 100\n1 100 100' | $run
echo '6\n30 19 5\n64 77 64\n15 19 97\n4 71 57\n90 86 84\n93 32 91' | $run
echo '8\n71 39 44\n32 83 55\n51 37 63\n89 29 100\n83 58 11\n65 13 15\n47 25 29\n60 66 19' | $run

-> 110
-> 3
-> 201
-> 208
-> 253


'''
