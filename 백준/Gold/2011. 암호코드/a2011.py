'''
2011번
암호코드 성공 골드5

시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
2 초	128 MB	64831	13362	9929	20.924%

문제
상근이와 선영이가 다른 사람들이 남매간의 대화를 듣는 것을 방지하기 위해서 대화를 서로 암호화 하기로 했다. 그래서 다음과 같은 대화를 했다.

상근: 그냥 간단히 암호화 하자. A를 1이라고 하고, B는 2로, 그리고 Z는 26으로 하는거야.
선영: 그럼 안돼. 만약, "BEAN"을 암호화하면 25114가 나오는데, 이걸 다시 글자로 바꾸는 방법은 여러 가지가 있어.
상근: 그렇네. 25114를 다시 영어로 바꾸면, "BEAAD", "YAAD", "YAN", "YKD", "BEKD", "BEAN" 총 6가지가 나오는데, BEAN이 맞는 단어라는건 쉽게 알수 있잖아?
선영: 예가 적절하지 않았네 ㅠㅠ 만약 내가 500자리 글자를 암호화 했다고 해봐. 그 때는 나올 수 있는 해석이 정말 많은데, 그걸 언제 다해봐?
상근: 얼마나 많은데?
선영: 구해보자!

어떤 암호가 주어졌을 때, 그 암호의 해석이 몇 가지가 나올 수 있는지 구하는 프로그램을 작성하시오.

입력
첫째 줄에 5000자리 이하의 암호가 주어진다. 암호는 숫자로 이루어져 있다.

출력
나올 수 있는 해석의 가짓수를 구하시오. 정답이 매우 클 수 있으므로, 1000000으로 나눈 나머지를 출력한다.

암호가 잘못되어 암호를 해석할 수 없는 경우에는 0을 출력한다.

----

단순하게 1차원 dp로 풀이함.
제출 후 검증 확인.

'''


import sys

def log(fmt, *args): print(fmt % args, file=sys.stderr)

MOD = 1_000_000

def get_input():
    input = sys.stdin.readline
    A = input().rstrip()
    return A,

def solve(A:str)->int:
    '''
    Args:  숫자로 이루어진 암호문
    Returns: 해독 가능한 경우의 수
        암호가 잘못되어 암호를 해석할 수 없는 경우에는 0.
    '''

    N = len(A)
    dp = [0] * (N+1)

    dp[0] = 1
    if N >= 1:
        dp[1] = 1 if A[0]!='0' else 0 # 1~9 -> A~J 해독

    for k in range(2, N+1):
        '''
        dp[k] 는 길이 k의 부분 암호문 A[:k] 의 해독 가능한 숫자
        dp[k-1] 에 A[k-1:k] 한 글자 해독의 경우 포함. 0은 유효한 암호 아님.
        dp[k-2] 에 A[k-2:k] 두 글자 해독의 경우 포함. 반드시 두 글자이어야 하므로 10~26 사이의 숫자만 해당.
        '''
        dp[k] = (
            (dp[k-1] if A[k-1]!='0' else 0) # A[k-1]은 0 만 아니라면 A~J 중 하나의 문자로 해독.
            + (dp[k-2] if 10<=int(A[k-2:k])<=26 else 0)
        ) % MOD
    return dp[N]



if __name__ == '__main__':
    print(solve(*get_input()))


'''
예제 입력 1
25114
예제 출력 1
6
예제 입력 2
1111111111
예제 출력 2
89

----
run=(python3 a2011.py)

echo '25114' | $run
# 6

echo '1111111111' | $run
# 89

'''
