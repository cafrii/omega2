'''
6064번

카잉 달력 다국어

시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
1 초	256 MB	82875	22456	16829	27.386%

문제
최근에 ICPC 탐사대는 남아메리카의 잉카 제국이 놀라운 문명을 지닌 카잉 제국을 토대로 하여 세워졌다는 사실을 발견했다.
카잉 제국의 백성들은 특이한 달력을 사용한 것으로 알려져 있다.
그들은 M과 N보다 작거나 같은 두 개의 자연수 x, y를 가지고 각 년도를 <x:y>와 같은 형식으로 표현하였다.
그들은 이 세상의 시초에 해당하는 첫 번째 해를 <1:1>로 표현하고, 두 번째 해를 <2:2>로 표현하였다. <x:y>의 다음 해를 표현한 것을 <x':y'>이라고 하자.
만일 x < M 이면 x' = x + 1이고, 그렇지 않으면 x' = 1이다.
같은 방식으로 만일 y < N이면 y' = y + 1이고, 그렇지 않으면 y' = 1이다.
<M:N>은 그들 달력의 마지막 해로서, 이 해에 세상의 종말이 도래한다는 예언이 전해 온다.

예를 들어, M = 10 이고 N = 12라고 하자. 첫 번째 해는 <1:1>로 표현되고, 11번째 해는 <1:11>로 표현된다.
<3:1>은 13번째 해를 나타내고, <10:12>는 마지막인 60번째 해를 나타낸다.

네 개의 정수 M, N, x와 y가 주어질 때, <M:N>이 카잉 달력의 마지막 해라고 하면 <x:y>는 몇 번째 해를 나타내는지 구하는 프로그램을 작성하라.

입력
입력 데이터는 표준 입력을 사용한다. 입력은 T개의 테스트 데이터로 구성된다.
입력의 첫 번째 줄에는 입력 데이터의 수를 나타내는 정수 T가 주어진다.
각 테스트 데이터는 한 줄로 구성된다. 각 줄에는 네 개의 정수 M, N, x와 y가 주어진다. (1 ≤ M, N ≤ 40,000, 1 ≤ x ≤ M, 1 ≤ y ≤ N)
여기서 <M:N>은 카잉 달력의 마지막 해를 나타낸다.

출력
출력은 표준 출력을 사용한다. 각 테스트 데이터에 대해, 정수 k를 한 줄에 출력한다.
여기서 k는 <x:y>가 k번째 해를 나타내는 것을 의미한다.
만일 <x:y>에 의해 표현되는 해가 없다면, 즉, <x:y>가 유효하지 않은 표현이면, -1을 출력한다.



-----

9:51~10:10 코딩. 그러나 틀린 답변 발견
10:42 에서야 채점 완료. 채점에 시간 엄청 걸림. brute force 말고 다른 방법을 찾아봐야 함

'''

import sys
input = sys.stdin.readline

MAX_MN = 40_000

def solve(M,N,x,y):
    #  1 ≤ x ≤ M, 1 ≤ y ≤ N
    if not (1<=x<=M and 1<=y<=N):
        return -1
    max_mn = M*N
    # x,y 가 1 부터 시작하는 값이면 나머지 연산이 불편하므로 1씩 줄여서 생각.
    # z는 y를 찾기 위한 running variable.
    z,k = (x-1)%N,x
    while k <= max_mn:
        print(f'{k}: {z}')
        if z == y-1:
            return k
        z,k = (z+M)%N, k+M
    return -1


T = int(input().strip())
ans = []
for _ in range(T):
    M,N,x,y = map(int, input().split())
    ans.append(solve(M,N,x,y))
print('\n'.join(map(str, ans)))


'''

예제 입력 1
3
10 12 3 9
10 12 7 2
13 11 5 6

예제 출력 1
33
-1
83


1
13 11 2 11
-> 132

1
5271 2389 3318 580
-> 11314884

1
11 13 5 13
-> 104

1
1 1 1 1
-> 1

1
4 4 4 4
-> 4

11
1 100 1 65
100 1 65 1
1 1 1 1
5 4 5 4
5 4 4 4
15 60 5 20
15 60 5 21
60 15 20 5
60 15 21 5
40000 39999 39998 39999
40000 39999 40000 39999
->
65 65 1 20 4 20 -1 20 -1 79998 1599960000

------


run=(python3 6064.py)

echo '1\n5 5 3 3' | $run
-> 3

echo '1\n11 13 5 13' | $run
-> 104


'''

